/// @ 0.16.0
// VALORANTのヨルがサイトにエントリーできるか観察するPlay
// @momizi06@misskey.io

// 2024.03.30 v0.1.0 くろでん氏(@kur0den0010@chpk.kur0den.net)作の「別インスタンスのユーザーでも簡単に共有できたりするやつ」を導入
// 2024.01.29 v0.0.6 クラッチ枠のMFMの破綻を修正
// 2024.01.29 v0.0.5 クラッチ枠(3%)を追加, それに従い失敗の確率を引き下げ(84% -> 81%)
// 2024.01.22 v0.0.4 成功におまけを追加, 成功の確率を正しいものに修正(13% -> 15%), 大成功のパターンを1つ追加, コードの整理
// 2024.01.11 v0.0.3 バグ修正(正しいおまけが表示されるように)
// 2024.01.11 v0.0.2 おまけを追加
// 2024.01.11 v0.0.1 初版

// --- License ---
// MIT License
// Copyright (c) 2024 momizi06 (@momizi06@misskey.io)
// https://github.com/momizi06/Misskey_Play/blob/main/LICENSE
// ---------------
// This program contains third-party programs. For more information, 
// See https://github.com/momizi06/Misskey_Play/blob/main/ThirdPartyNotices.txt
// ---------------


// メイン関数
@main(name, isLogin){  // isLoginはログインしているかどうかを判断するための変数なので消さないで
// 結果判定部分
// ------

// 81%(失敗)
let fail_choices = [
"残念！自分で投げたフラッシュで何も見えないよ！💥:meowcry:
倒されちゃった！失敗！"
"残念！テレポート先には銃を構えた敵が！$[flip :meowfingerguns:]:meowcry:
倒されちゃった！失敗！"
"残念！味方が付いてきてくれなかったよ！:meowcry::blank::meow_whistle:
倒されちゃった！失敗！"
"残念！間違えてフェイクテレポートしちゃった！:meow_facepalm:
失敗！"
"残念！ポータルが壊されちゃった！これじゃエントリーできないよ！:explosion::blank:$[flip :meow_yikes:]
失敗！"
"残念！KAY/Oのアルティメットで何もスキルが使えなくなっちゃった！:blobcat_frustration:
失敗！"
]

// 失敗解説
let fail_omake = [
"<small>おまけ(解説)
フラッシュはまともに受けるとしばらく何も見えなくなってしまいます。
ヨルはエントリー(敵陣地に侵入)する際、テレポートとフラッシュを組み合わせてエントリーすることが多いですが、割とよくこういった事故が起きます。</small>"
"<small>おまけ(解説)
ヨルあるあるです。フラッシュを投げてテレポートエントリー(テレポートで敵陣地に侵入)する時によく起きます。
フラッシュを受けてない敵にテレポート後の硬直時間を狙われてやられてしまうことが多いため、実際にやるときはだいたい祈りながらテレポートしています。</small>"
"<small>おまけ(解説)
ヨルあるあるです。ヨルのスキルはどれも後ろの味方をサポートするのには向かないスキルです。
このため、残りの味方が足止めを食らうとこれが頻繁に起きます。</small>"
"<small>おまけ(解説)
ヨルあるあるです。フェイクテレポートは敵にも聞こえる偽のテレポート音を出すことで注意を向かせるものです。
ただ、たまに間違えてフェイクテレポートを発動してしまい、エントリー(敵陣地に侵入)失敗なんてことも……</small>"
"<small>おまけ(解説)
詰みです。ヨルがエントリー(敵陣地に侵入)するときは基本的にテレポートを使ってすることが多いです。
しかし、このテレポートに必要なゲートは敵からも見える上、普通に壊されます。そうすると徒歩で無理やりエントリーするしかなくなってしまうので非常に困ります。</small>"
"<small>おまけ(解説)
あるあるです。VALORANTのキャラであるKAY/O(ケイオー)は、敵のスキルを数秒ほど使えなくする能力を持っています。
こうなると効果時間が終わるまで待つしかなくなりますが、そのころには別の場所にいた敵が集まっているので……</small>"
]

// 15%(成功)
let success_choices = [
"あ！味方のジェットと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda:💨
成功！"
"あ！味方のレイズと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda::explosion:
成功！"
"あ！味方のレイナと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda::blobcat_mudamudamuda:
成功！"
"あ！味方のフェニックスと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda::blaze:
成功！"
"あ！味方のネオンと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda:⚡
成功！"
"あ！味方のアイソと一緒にエントリーできてサイトをとれたよ！:blobcat_mudamudamuda:🛡
成功！"
"あ！フラッシュテレポートで無防備な敵を倒してサイトをとれたよ！:blobcatrainbow:
成功！"
]

// 成功解説
let success_omake = [
"<small>おまけ(解説)
ジェットは風を操ることができるキャラです。
スキルが瞬間的な移動、および数秒間敵から自分の位置を隠せるスモークとエントリーの際に非常に強力です。
ちなみに作者は全く使えません。</small>"
"<small>おまけ(解説)
レイズはとにかく爆発を使うキャラです。
ブラストパック(小型爆弾)を使用した立体的な動き、グレネードで自身が動けるエリアを広げるなど、非常にアグレッシブかつアクティブに戦えるキャラです。
ちなみに作者はブラストパックが下手すぎて使えません。</small>"
"<small>おまけ(解説)
レイナは……かなり特殊なキャラです。
スキルは数秒間見ている敵に対し視界を奪う目を出すものと、自分が倒した敵の魂で回復や数秒間安全に退避ができるものです。
このため、キルを量産できる人のレイナは誰にも止められません。ちなみに作者はキルが取れないので使えません。</small>"
"<small>おまけ(解説)
フェニックスは炎を操るキャラです。
炎の壁を出して敵からの視界を遮ったり、カーブするフラッシュで敵の行動力を奪ったりと初心者にも扱いやすいキャラです。
また、自分の炎であれば回復もできるため継戦能力も持ち合わせています。ちなみに作者はフラッシュが下手すぎて使えません。</small>"
"<small>おまけ(解説)
ネオンは電気を操るキャラです。
また、スキルで通常よりも早く移動したり、敵からの視界を遮る壁を作ったりと迅速な制圧に長けています。
ちなみに作者は敵の前にスキルで突っ込んで死ぬためまともに使えません。</small>"
"<small>おまけ(解説)
アイソは敵の弾を防ぐことができるキャラです。
特に1対1の状況で輝くスキルが多く、うまい人のアイソは割と手が付けられません。その代償としてエイム力が常に求められます。
ちなみに作者はエイムが下手すぎて使えません。</small>"
"<small>おまけ(解説)
ヨルの基本となるエントリーの方法です。
これが成功したとしても、後続の味方が来てくれるかはわからず、またサイト内で敵の攻撃に耐えなければいけたいため非常につらいです。
今回は成功しました。やったね</small>"
]

// 3%(クラッチ)
let clutch_choices = [
"<center>
$[position.y=-11.5 $[spin.left,speed=.1s,delay=4.1s $[spin.speed=.1s,delay=4.15s $[rotate.deg=180 なんと1人で残りの敵をみんな倒しちゃった！！！クラッチ成功！！！
$[tada.speed=0s :superplay:]]







$[position.y=-2 :uwa_xtu:味方が全員やられちゃった！！！]]]]
$[position.y=-27 $[spin.left,speed=.2s,delay=3s $[spin.speed=.2s,delay=3.1s $[spin.left,speed=.1s,delay=4s $[spin.speed=.1s,delay=4.05s $[rotate.deg=180 $[tada.speed=0s :blobcatevil: < 俺がやる]]









]]]]]
</center>"
]

// クラッチ開設
let clutch_omake = [
"<small>おまけ(解説)
まさかの大逆転です。
VALORANTでは1対複数の状況から勝つことをクラッチ(Clutch)と呼びます。成功するとめちゃくちゃ雰囲気爆上がりです。
やったね！！！</small>"
]

// 1%(大成功)
let lucky_choices = [
"$[tada.speed=0s :blobcatevil: < 俺がやる]
あ！アルティメットで敵の背後を取ってそのままACEを取れた！！！:blobcat_mudamudamuda:
$[sparkle 大成功！！！]"
"$[tada.speed=0s $[flip :meowfingerguns:]:blank:$[ruby :blobcatsweatflips: どっち？？？]:blank::meowfingerguns:]
あ！デコイの振りをしたら成功してそのままサイト取れちゃった！！！
$[sparkle 大成功！！！]"
"<center>$[bg.color=d3373a $[fg.color=fbecec $[font.monospace $[tada.speed=0s **チート使用者を検知しました**]

対戦中止
<small>チート利用者を処分し、参加中のゲームをキャンセルしました。このゲームの勝敗はどのプレイヤーにも記録されません</small>]]]</center>"
]

// 大成功解説
let lucky_omake = [
"<small>おまけ(解説)
ヨルのアルティメットは、簡単に言えば透明人間になって索敵や敵の後ろを取りに行くというものです。
ただし、効果時間中でも一応敵には近くにいることは分かるようになっているのと、銃が使えない(スキルはOK)ため終了後の硬直時間でやられることもよくあります。
しかし、うまく使えば非常に強力なスキルであり、ACE(自分一人で敵を全員倒す)も狙えます。</small>"
"<small>おまけ(解説)
一歩間違えたら戦犯です。
ヨルのスキルには自分とそっくりなデコイを出すものがあります。このデコイは、まっすぐに歩いていき、敵に撃たれると強力なフラッシュを出します。
ここではそのデコイと本物が同時に歩いていき、そのまま騙された敵を本物が倒すことに成功しました。</small>"
"<small>おまけ(解説)
あらま、めったに見ない画面ですが、どうやら敵か味方にチーター(ずるをする人)がいたようです。
VALORANTはチートの報告が入った瞬間に対象プレーヤーのPCに対して調査が入り、チートが確認されればその時点で試合がなかったことになります。
さらに対象者は基本的にBAN(アクセス禁止)になります。……もしかしてあなたじゃないですよね？</small>"
]

// 乱数の最大値
let maxNumber = 100

// 失敗になる範囲の上限
let failNumber = 81

// 成功になる範囲の上限
let succNumber = 96

// クラッチになる範囲の上限
let clutchNumber = 99


// 変数と乱数の数値の関係
// dice:     | 1 ~ failNumber | (failNumber + 1) ~ succNumber | (succNumber + 1) ~ clutchNumber | (clutchNumber + 1) ~ maxNumber |
// 判定:     | 失敗           | 成功                          | クラッチ                        | 大成功                         |
// diceRoll: | 0              | 1                             | 2                               | 3                              |


// シードが「ユーザーID+今日の日付」である乱数生成器を用意(結果選択用)
let diceRandom = Math:gen_rng(`{name}{Date:year()}{Date:month()}{Date:day()}`)
let dice = diceRandom(1 maxNumber)

// シードが「ユーザーID+今日の日付」である乱数生成器を用意(内容選択用)
let choiceRandom = Math:gen_rng(`{name}{Date:day()}{Date:month()}{Date:year()}`)

// 判定
let diceRoll = if (dice < (failNumber + 1)) 0 elif (dice > failNumber && dice < (succNumber + 1)) 1 elif (dice > succNumber && dice < (clutchNumber + 1)) 2 else 3


// 結果テキスト
let resultIndex = if (diceRoll == 0) choiceRandom(0 (fail_choices.len - 1)) elif (diceRoll == 1) choiceRandom(0 (success_choices.len - 1)) elif (diceRoll == 2) choiceRandom(0 (clutch_choices.len - 1)) else choiceRandom(0 (lucky_choices.len - 1))
let result = if (diceRoll == 0) fail_choices[resultIndex] elif (diceRoll == 1) success_choices[resultIndex] elif (diceRoll == 2) clutch_choices[resultIndex] else lucky_choices[resultIndex]

let omake = if (diceRoll == 0) fail_omake[resultIndex] elif (diceRoll == 1) success_omake[resultIndex] elif (diceRoll == 2) clutch_omake[resultIndex] else lucky_omake[resultIndex]

    // ------
    // ここまで自由に処理できる場所

    // 最終的にTLに投稿される文字列
    // 投稿される文言を編集したい時はここをいじる
    let postText = `{result}{Str:lf}{Str:lf}#ヨルのイケてるエントリー占い{Str:lf}{THIS_URL}`

    postProcessing(result, omake, postText, isLogin)
}


// ここから下手に触ったら壊れるところ

// メイン処理後の処理
@postProcessing(result, resultOmake, postText, isLogin) {
    var instanceDomain = ""

    if isLogin == true { //ログインしている場合はそのままフォームを表示
        Ui:render([
            Ui:C:container({
                align: 'center'
                children: [
                    Ui:C:mfm({ text: `{result}` })
                    Ui:C:postFormButton({
                        text: "LOCK IN"
                        rounded: false
                        primary: true
                        form: {
                            text: `{postText}`
                        }
                    })
                ]
            })
            Ui:C:container({
		        align: 'left'
		        children: [
			        Ui:C:mfm({ text: `{Str:lf}{Str:lf}{resultOmake}` })
		        ]
            })
        ])
    } else { // 未ログイン時はURL生成用のUIを表示
        let encodedPostText = encodeURIComponent(postText)  // 最終的に投稿される文言をURLエンコード
        Ui:render([
            Ui:C:container({
                align: 'center'
                children: [
                    Ui:C:container({
                        align: 'center'
                        children: [
                            Ui:C:mfm({ text: `{result}` })
                        ]
                    })
                    Ui:C:container({
		                align: 'left'
		                children: [
			                Ui:C:mfm({ text: `{Str:lf}{Str:lf}{resultOmake}` })
		                ]
                    })
                    Ui:C:folder({
                        opened: true
                        title: "共有"
                        children: [
                            Ui:C:container({
                                align: 'center'
                                children: [
                                    Ui:C:container({
                                        align: 'center'
                                        children: [
                                            Ui:C:mfm({ text: `[Misskey-Hub経由で共有する](https://misskey-hub.net/share?text={encodedPostText})`, size: 1.5}) // Misskey-Hub経由共有リンク
                                        ]
                                    })
                                    Ui:C:container({
                                        align: 'center'
                                        children: [
                                            Ui:C:mfm({ text: '指定したサーバーで投稿できるURLを生成できます' }) // 説明
                                            Ui:C:mfm({
                                                text: if Mk:load("inputInstance") != null {
                                                    instanceDomain = Mk:load("inputInstance")
                                                    `[投稿用リンク<small>({instanceDomain})</small>](<https://{instanceDomain}/share?text={encodedPostText}>)`
                                                } else {
                                                    ``
                                                }
                                                size: 1.5
                                                } 'link') // 後でURLを表示するためのUI要素
                                            Ui:C:textInput({
                                                onInput: @(text){ instanceDomain = text } //入力時に変数に入力された文字列を代入
                                                default:  if Mk:load("inputInstance") == null {
                                                            ""
                                                        } else {
                                                            Mk:load("inputInstance")// 以前入力された名前をデフォルトにする
                                                        }
                                                label: '投稿したいサーバーのドメインを入力'
                                                caption: '例）misskey.io, koliosky.com, chpk.kur0den.net'
                                            })
                                            Ui:C:button({
                                                text: '投稿用URLを生成する' // URL生成ボタン
                                                onClick: @(){ //ボタン押下時にURL更新を実行
                                                    if instanceDomain == '' {
                                                        if Mk:load("inputInstance") != null {
                                                            instanceDomain =  Mk:load("inputInstance")
                                                        }
                                                    } else {
                                                        Mk:save("inputInstance", instanceDomain) // 入力されたドメインを保存
                                                    }
                                                    if instanceDomain == '' {
                                                        Ui:get('link').update({text: `インスタンスドメインを指定してください`}) // 日本語以外の記号(<>など)はURLエンコードする必要あり
                                                    } else {
                                                        Ui:get('link').update({text: `[投稿用リンク](<https://{instanceDomain}/share?text={encodedPostText}>)`}) // 日本語以外の記号(<>など)はURLエンコードする必要あり
                                                    }
                                                } // URLを生成・更新
                                                primary: true
                                                rounded: true
                                            })
                                        ]
                                    })
                                    Ui:C:container({
                                        align: 'center'
                                        children: [
                                            Ui:C:mfm({ text: '以下のボタンを押すと、投稿用のフォームが表示されます'}) // 説明
                                            Ui:C:button({
                                                text: 'コピー用のフォームを表示する' // コピー用フォーム表示ボタン
                                                onClick: @(){ //ボタン押下時にフォーム表示を実行
                                                    Ui:get('copyButton').update({
                                                        align: "center"
                                                        children: [
                                                            Ui:C:mfm({ text: `\`\`\`{Str:lf}{postText}{Str:lf}\`\`\``}) // 説明
                                                        ]
                                                    })
                                                    } // 投稿フォーム表示
                                                primary: false
                                                rounded: true
                                                })
                                        ]
                                    }, "copyButton")
                                ]
                            })
                        ]
                    })
                ]
            })
        ])
    }
}

// メイン表示前の処理
@preProcessing() {
    var name = ''  // ユーザー名
    var isLogin = true  // ログインしているかどうか

    if USER_ID == null { //未ログイン状態(リモートからの実行とか)かどうかをIDがnullかどうかで判断
        isLogin = false
        Ui:render([         //ユーザー名送信用のフォームを表示
            Ui:C:container({
                align: 'center'
                children: [
                    Ui:C:textInput({
                        onInput: @(text){
                            name = text
                        } //入力時に変数に入力された文字列を代入
                        default: if Mk:load("inputName") == null {
                                    ""
                                } else {
                                    Mk:load("inputName")// 以前入力された名前をデフォルトにする
                                }
                        label: 'ユーザー名を入力'
                        caption: '乱数生成に使用されます' // 名前を入力する理由を書いておく
                    })
                    Ui:C:buttons({
                        buttons: [
                            {
                                text: 'SKIP' // 入力スキップ用
                                onClick: @(){
                                    if Mk:load("inputName") == null {
                                        name = 'Yoru'
                                    } else {
                                        name = Mk:load("inputName")
                                    }
                                    main(name, isLogin)
                                    } // nameをテンプレにしたうえでメインの処理を実行
                                primary: false
                                rounded: true
                            }
                            {
                                text: 'LOCK IN' // 入力確定用
                                onClick: @(){
                                    if name == '' { //未入力時はnameにテンプレか保存されている名前を代入してからメインを実行
                                        if Mk:load("inputName") == null {
                                            name = "Yoru"
                                        } else {
                                            name = Mk:load("inputName")
                                        }
                                    }
                                    Mk:save("inputName", name) // 入力された名前を保存
                                    main(name, isLogin)
                                }
                                primary: true // 確定側をprimaryに
                                rounded: true
                            }
                        ]
                    })
                ]
            })


        ])
    } else {
        name = USER_NAME  // ログイン時はユーザー名を引数に、isLoginがTrueのままメインを実行
        main(name, isLogin)
    }
}

// URLエンコード関数
@encodeURIComponent(content) {
    var utf8Arr = []  // UTF-8に変換したあとの配列
    let noEncode = [34, 37, 45, 46, 48, 49, 50, 51, 52, 53,
                    54, 55, 56, 57, 65, 66, 67, 68, 69, 70,
                    71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                    81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
                    92, 94, 95, 96, 97, 98, 99, 100, 101, 102,
                    103, 104, 105, 106, 107, 108, 109, 110,
                    111, 112, 113, 114, 115, 116, 117, 118,
                    119, 120, 121, 122, 123, 124, 125, 126] // URLエンコードしない文字のUTF-8コード


    each let v, content.to_arr() {
        utf8Arr.push(v.to_utf8_byte_arr())  // 文字区切りの配列にした後にutf8に変換して配列に追加
    }

    var urlStr = ""  // 最終的に返す文字列
    each let a, utf8Arr {
        if a.len == 1 {  // 1バイト文字の場合
            if noEncode.incl(a[0]) {  // エンコードしない文字コードの場合
                let nomalStr = Str:from_utf8_bytes(a)  // そのまま文字列に変換
                urlStr = `{urlStr}{nomalStr}`  // 文字列に追加
                continue  // 次の文字へ
            }
        }
        each let v, a {  // エンコードする1バイト文字/2バイト文字以上の場合
            var hexCode = Num:to_hex(v)  // 16進数に変換
            if hexCode.len == 1 {  // 1桁の場合
                hexCode = `0{hexCode}`  // 0埋め
            }
            urlStr = `{urlStr}%{hexCode}`  // 文字列に追加
        }
    }
    return urlStr  // 最終的な文字列を返す
}


// preProcessingを実行
preProcessing()
